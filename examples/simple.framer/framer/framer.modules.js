require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"apng":[function(require,module,exports){

/**
 * framerjs-apng v0.0.1
 * @copyright 2015 KimDaeWook
 * @link https://github.com/KimDaeWook/framerjs-apng
 * @license MIT
 */
var _APNG_CANVAS_BASE64_ENCODED, apngCanvasSource, apngImageDescriptor, updateAPNGLayerSize;

updateAPNGLayerSize = function(layer) {
  var apng, coverScale, scaleX, scaleY;
  if (!layer._APNG) {
    return;
  }
  apng = layer._APNG;
  if (!apng.animation) {
    apng.canvas.width = 0;
    return apng.canvas.height = 0;
  } else {
    apng.canvas.width = apng.animation.width;
    apng.canvas.height = apng.animation.height;
    scaleX = layer.width / apng.canvas.width;
    scaleY = layer.height / apng.canvas.height;
    coverScale = Math.max(0, Math.max(scaleX, scaleY)).toString();
    apng.canvas.style.transform = "scale(" + coverScale + "," + coverScale + ")";
    apng.canvas.style.transformOrigin = "0% 0%";
    apng.canvas.style.webkitTransform = "scale(" + coverScale + "," + coverScale + ")";
    return apng.canvas.style.webkitTransformOrigin = "0% 0%";
  }
};

apngImageDescriptor = {
  propertyName: "apngImage",
  get: function() {
    return this._getPropertyValue("apngImage");
  },
  set: function(value) {
    var currentValue, self;
    self = this;
    currentValue = this._getPropertyValue("apngImage");
    if (currentValue === value) {
      return self.emit("load");
    }
    if (!self._APNG) {
      self._APNG = {
        canvas: document.createElement('canvas'),
        context: null,
        loop: 0,
        isPlayed: false
      };
      this._element.appendChild(self._APNG.canvas);
      self._APNG.context = self._APNG.canvas.getContext("2d");
      this.on("change:size", function() {
        return updateAPNGLayerSize(self);
      });
    }
    print("try load " + value);
    APNG.parseURL(value).then(function(animation) {
      if (self._APNG.animation) {
        self._APNG.animation.removeContext(self._APNG.context);
      }
      self._APNG.animation = animation;
      updateAPNGLayerSize(self);
      animation.numPlays = self._APNG.loop;
      if (self._APNG.isPlayed) {
        self.playAPNG();
      }
      return self.emit("load");
    }, function(err) {
      if (self._APNG.animation) {
        self._APNG.animation.removeContext(self._APNG.context);
      }
      self._APNG.animation = null;
      updateAPNGLayerSize(self);
      return self.emit("error", err);
    });
    return this._setPropertyValue("apngImage", value);
  },
  importable: true,
  exportable: true
};

Object.defineProperty(Layer.prototype, 'apngImage', apngImageDescriptor);

Layer["_DefinedPropertiesKey"]["apngImage"] = apngImageDescriptor;

Layer.prototype.playAPNG = function() {
  var animation;
  this._APNG.isPlayed = true;
  animation = this._APNG.animation;
  if (animation) {
    animation.removeContext(this._APNG.context);
    animation.addContext(this._APNG.context);
    return animation.play();
  }
};

Layer.prototype.stopAPNG = function() {
  var animation;
  this._APNG.isPlayed = false;
  animation = this._APNG.animation;
  if (animation) {
    return animation.removeContext(this._APNG.context);
  }
};


/**
 * apng-canvas v2.0.1
 * @copyright 2011, 2015 David Mzareulyan
 * @link https://github.com/davidmz/apng-canvas
 * @license MIT
 */

_APNG_CANVAS_BASE64_ENCODED = "";

apngCanvasSource = atob(_APNG_CANVAS_BASE64_ENCODED);

eval(apngCanvasSource);


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
