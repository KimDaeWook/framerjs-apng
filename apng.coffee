###*
# framerjs-apng v0.0.1
# @copyright 2015 KimDaeWook
# @link https://github.com/KimDaeWook/framerjs-apng
# @license MIT
###

updateAPNGLayerSize = (layer)->
	if !layer._APNG
		return
	apng = layer._APNG;
	
	if !apng.animation
		apng.canvas.width = 0
		apng.canvas.height = 0
	else 
		apng.canvas.width = apng.animation.width
		apng.canvas.height = apng.animation.height
		
		scaleX = layer.width / apng.canvas.width
		scaleY = layer.height / apng.canvas.height
		coverScale = Math.max(0, Math.max(scaleX, scaleY)).toString();
		apng.canvas.style.transform = "scale(" + coverScale + "," + coverScale + ")"
		apng.canvas.style.transformOrigin = "0% 0%"	
		apng.canvas.style.webkitTransform = "scale(" + coverScale + "," + coverScale + ")"
		apng.canvas.style.webkitTransformOrigin = "0% 0%"	
		
apngImageDescriptor = 
	propertyName: "apngImage"
	get: ->
    	return @_getPropertyValue "apngImage"
	set: (value) ->				
		self = @
	
		currentValue = @_getPropertyValue "apngImage"
		if currentValue == value
			return self.emit "load"
		
		if !self._APNG
			self._APNG = 
				canvas : document.createElement 'canvas'
				context : null
				loop : 0,
				isPlayed : false
			
			@_element.appendChild(self._APNG.canvas)			
			self._APNG.context = self._APNG.canvas.getContext("2d")			
			@.on "change:size", ->
				updateAPNGLayerSize(self)									
				
		print "try load " + value	
		APNG.parseURL(value).then (animation) ->
		
			if self._APNG.animation
				self._APNG.animation.removeContext(self._APNG.context)
				
			self._APNG.animation = animation
			updateAPNGLayerSize(self)						
			animation.numPlays = self._APNG.loop
			if self._APNG.isPlayed
				self.playAPNG()
				
			self.emit "load"
			
		, (err)->
			if self._APNG.animation
				self._APNG.animation.removeContext(self._APNG.context)
			self._APNG.animation = null
			updateAPNGLayerSize(self)		
			self.emit "error" , err
			
		@_setPropertyValue("apngImage", value)
		
	importable : true
	exportable : true
	 
Object.defineProperty Layer.prototype, 'apngImage', apngImageDescriptor
Layer["_DefinedPropertiesKey"]["apngImage"] = apngImageDescriptor 

	
Layer.prototype.playAPNG = ->
	@._APNG.isPlayed = true
	animation = @._APNG.animation;
	if(animation)
		animation.removeContext(@._APNG.context)
		animation.addContext(@._APNG.context)
		animation.play()
	
Layer.prototype.stopAPNG = ->
	@._APNG.isPlayed = false
	animation = @._APNG.animation;
	if(animation)
		animation.removeContext(@._APNG.context)

###*
# apng-canvas v2.0.1
# @copyright 2011, 2015 David Mzareulyan
# @link https://github.com/davidmz/apng-canvas
# @license MIT
###
_APNG_CANVAS_BASE64_ENCODED = ""

apngCanvasSource = atob(_APNG_CANVAS_BASE64_ENCODED)
eval(apngCanvasSource)
